/*
 * Font.h
 *
 *  Created on: 17 sept. 2019
 *      Author: azeddine El Bassbasi
 */

#ifndef SWTP_GRAPHICS_FONT_H_
#define SWTP_GRAPHICS_FONT_H_
#include "Rect.h"
/**
 * Instances of this class describe operating system fonts.
 * <p>
 * For platform-independent behaviour, use the get and set methods
 * corresponding to the following properties:
 * <dl>
 * <dt>height</dt><dd>the height of the font in points</dd>
 * <dt>name</dt><dd>the face name of the font, which may include the foundry</dd>
 * <dt>style</dt><dd>A bitwise combination of NORMAL, ITALIC and BOLD</dd>
 * </dl>
 * If extra, platform-dependent functionality is required:
 * <ul>
 * <li>On <em>Windows</em>, the data member of the <code>FontData</code>
 * corresponds to a Windows <code>LOGFONT</code> structure whose fields
 * may be retrieved and modified.</li>
 * <li>On <em>X</em>, the fields of the <code>FontData</code> correspond
 * to the entries in the font's XLFD name and may be retrieved and modified.
 * </ul>
 * Application code does <em>not</em> need to explicitly release the
 * resources managed by each instance when those instances are no longer
 * required, and thus no <code>dispose()</code> method is provided.
 *
 * @see Font
 */
class WFontData {
public:
	/**
	 * Constructs a new uninitialized font data.
	 */
	WFontData() {
		w_fontdata_init(W_FONTDATA(this));
	}
	~WFontData() {
		w_fontdata_dispose(W_FONTDATA(this));
	}
	void Dispose() {
		w_fontdata_dispose(W_FONTDATA(this));
	}
	/**
	 * Constructs a new FontData given a string representation
	 * in the form generated by the <code>FontData.toString</code>
	 * method.
	 * <p>
	 * Note that the representation varies between platforms,
	 * and a FontData can only be created from a string that was
	 * generated on the same platform.
	 * </p>
	 *
	 * @param string the string representation of a <code>FontData</code> (must not be null)
	 *
	 * @see #toString
	 */
	WFontData(const char *name) {
		w_fontdata_init(W_FONTDATA(this));
		w_fontdata_create(W_FONTDATA(this), name, -1, W_ENCODING_UTF8, W_NORMAL,
				12);
	}
	/**
	 * Constructs a new font data given a font name,
	 * the height of the desired font in points,
	 * and a font style.
	 *
	 * @param name the name of the font (must not be null)
	 * @param height the font height in points
	 * @param style a bit or combination of NORMAL, BOLD, ITALIC
	 */
	WFontData(const char *name, int height, int style) {
		w_fontdata_init(W_FONTDATA(this));
		w_fontdata_create(W_FONTDATA(this), name, -1, W_ENCODING_UTF8, style,
				height);
	}
	/**
	 * Returns the height of the receiver in points.
	 *
	 * @return the height of this FontData
	 *
	 * @see #setHeight(int)
	 */
	int GetHeight() {
		return w_fontdata_get_height(W_FONTDATA(this));
	}
	/**
	 * Returns the name of the receiver.
	 * On platforms that support font foundries, the return value will
	 * be the foundry followed by a dash ("-") followed by the face name.
	 *
	 * @return the name of this <code>FontData</code>
	 *
	 * @see #setName
	 */
	WString GetName() {
		WString str;
		w_fontdata_get_name(W_FONTDATA(this), w_alloc_string_ref, &str.ref,
				W_ENCODING_UTF8);
		return str;
	}
	/**
	 * Returns the name of the receiver.
	 * On platforms that support font foundries, the return value will
	 * be the foundry followed by a dash ("-") followed by the face name.
	 *
	 * @return the name of this <code>FontData</code>
	 *
	 * @see #setName
	 */
	size_t GetName(char *name, size_t size) {
		w_alloc_buffer buffer;
		buffer.buffer = name;
		buffer.size = size;
		buffer.total_size = 0;
		w_fontdata_get_name(W_FONTDATA(this), w_alloc_buffer_copy, &buffer,
				W_ENCODING_UTF8);
		return buffer.total_size;
	}
	/**
	 * Returns the style of the receiver which is a bitwise OR of
	 * one or more of the <code>SWT</code> constants NORMAL, BOLD
	 * and ITALIC.
	 *
	 * @return the style of this <code>FontData</code>
	 *
	 * @see #setStyle
	 */
	int GetStyle() {
		return w_fontdata_get_style(W_FONTDATA(this));
	}
	bool IsNormal() {
		return GetStyle() & W_NORMAL;
	}
	bool IsItalic() {
		return GetStyle() & W_ITALIC;
	}
	bool IsBold() {
		return GetStyle() & W_BOLD;
	}
	bool Set(const char *name, int height, int style) {
		return w_fontdata_set(W_FONTDATA(this), name, -1, W_ENCODING_UTF8,
				height, style) > 0;
	}
	/**
	 * Sets the height of the receiver. The parameter is
	 * specified in terms of points, where a point is one
	 * seventy-second of an inch.
	 *
	 * @param height the height of the <code>FontData</code>
	 *
	 * @see #getHeight
	 */
	bool SetHeight(int height) {
		return w_fontdata_set_height(W_FONTDATA(this), height) > 0;
	}
	/**
	 * Sets the name of the receiver.
	 * <p>
	 * Some platforms support font foundries. On these platforms, the name
	 * of the font specified in setName() may have one of the following forms:
	 * <ol>
	 * <li>a face name (for example, "courier")</li>
	 * <li>a foundry followed by a dash ("-") followed by a face name (for example, "adobe-courier")</li>
	 * </ol>
	 * In either case, the name returned from getName() will include the
	 * foundry.
	 * </p>
	 * <p>
	 * On platforms that do not support font foundries, only the face name
	 * (for example, "courier") is used in <code>setName()</code> and
	 * <code>getName()</code>.
	 * </p>
	 *
	 * @param name the name of the font data (must not be null)
	 *
	 * @see #getName
	 */
	bool SetName(const char *name) {
		return w_fontdata_set_name(W_FONTDATA(this), name, -1, W_ENCODING_UTF8)
				> 0;
	}
	/**
	 * Sets the style of the receiver to the argument which must
	 * be a bitwise OR of one or more of the <code>SWT</code>
	 * constants NORMAL, BOLD and ITALIC.  All other style bits are
	 * ignored.
	 *
	 * @param style the new style for this <code>FontData</code>
	 *
	 * @see #getStyle
	 */
	bool SetStyle(int style) {
		return w_fontdata_set_style(W_FONTDATA(this), style) > 0;
	}
	void SetItalic() {
		int style = GetStyle();
		SetStyle(style | W_ITALIC);
	}
	void SetBold() {
		int style = GetStyle();
		SetStyle(style | W_BOLD);
	}
private:
	char handle[sizeof(w_fontdata)];
};
/**
 * Instances of this class manage operating system resources that
 * define how text looks when it is displayed. Fonts may be constructed
 * by providing a device and either name, size and style information
 * or a <code>FontData</code> object which encapsulates this data.
 * <p>
 * Application code must explicitly invoke the <code>Font.dispose()</code>
 * method to release the operating system resources managed by each instance
 * when those instances are no longer required.
 * </p>
 *
 * @see FontData
 */
class WFont: public WResource {
public:
	WFont() {
		w_font_init(W_FONT(this));
	}
	~ WFont() {
		w_font_dispose(W_FONT(this));
	}
	void Dispose() {
		w_font_dispose(W_FONT(this));
	}
	/**
	 * Constructs a new font given a device, a font name,
	 * the height of the desired font in points, and a font
	 * style.
	 * <p>
	 * You must dispose the font when it is no longer required.
	 * </p>
	 *
	 * @param device the device to create the font on
	 * @param name the name of the font (must not be null)
	 * @param height the font height in points
	 * @param style a bit or combination of NORMAL, BOLD, ITALIC
	 */
	bool Create(const char *name, int style, int size) {
		return w_font_create(W_FONT(this), name, -1, W_ENCODING_UTF8, style,
				size) > 0;
	}
	/**
	 * Constructs a new font given a device and font data
	 * which describes the desired font's appearance.
	 * <p>
	 * You must dispose the font when it is no longer required.
	 * </p>
	 *
	 * @param device the device to create the font on
	 * @param fd the FontData that describes the desired font (must not be null)
	 */
	bool Create(const WFontData &data) {
		return w_font_create_from_fontdata(W_FONT(this), W_FONTDATA(&data)) > 0;
	}
	/**
	 * Returns an array of <code>FontData</code>s representing the receiver.
	 * On Windows, only one FontData will be returned per font. On X however,
	 * a <code>Font</code> object <em>may</em> be composed of multiple X
	 * fonts. To support this case, we return an array of font data objects.
	 *
	 * @return an array of font data objects describing the receiver
	 */
	bool GetFontData(WFontData &data) {
		return w_font_get_fontdata(W_FONT(this), W_FONTDATA(&data)) > 0;
	}
private:
	void *handle[sizeof(w_font) / sizeof(void*)];
};

/**
 * Instances of this class provide measurement information
 * about fonts including ascent, descent, height, leading
 * space between rows, and average character width.
 * <code>FontMetrics</code> are obtained from <code>GC</code>s
 * using the <code>getFontMetrics()</code> method.
 */
class WFontMetrics {
public:
	WFontMetrics() {
		w_fontmetrics_init(W_FONTMETRICS(this));
	}
	~WFontMetrics() {
		w_fontmetrics_dispose(W_FONTMETRICS(this));
	}
	void Dispose() {
		w_fontmetrics_dispose(W_FONTMETRICS(this));
	}

	/**
	 * Returns the ascent of the font described by the receiver. A
	 * font's <em>ascent</em> is the distance from the baseline to the
	 * top of actual characters, not including any of the leading area,
	 * measured in pixels.
	 *
	 * @return the ascent of the font
	 */
	int getAscent() {
		return w_fontmetrics_get_ascent(W_FONTMETRICS(this));
	}

	/**
	 * Returns the average character width, measured in pixels,
	 * of the font described by the receiver.
	 *
	 * @return the average character width of the font
	 */
	int getAverageCharWidth() {
		return w_fontmetrics_get_average_charwidth(W_FONTMETRICS(this));
	}

	/**
	 * Returns the descent of the font described by the receiver. A
	 * font's <em>descent</em> is the distance from the baseline to the
	 * bottom of actual characters, not including any of the leading area,
	 * measured in pixels.
	 *
	 * @return the descent of the font
	 */
	int getDescent() {
		return w_fontmetrics_get_descent(W_FONTMETRICS(this));
	}

	/**
	 * Returns the height of the font described by the receiver,
	 * measured in pixels. A font's <em>height</em> is the sum of
	 * its ascent, descent and leading area.
	 *
	 * @return the height of the font
	 *
	 * @see #getAscent
	 * @see #getDescent
	 * @see #getLeading
	 */
	int getHeight() {
		return w_fontmetrics_get_height(W_FONTMETRICS(this));
	}

	/**
	 * Returns the leading area of the font described by the
	 * receiver. A font's <em>leading area</em> is the space
	 * above its ascent which may include accents or other marks.
	 *
	 * @return the leading space of the font
	 */
	int getLeading() {
		return w_fontmetrics_get_leading(W_FONTMETRICS(this));
	}
private:
	char handle[sizeof(w_fontmetrics)];
};

#endif /* SWTP_GRAPHICS_FONT_H_ */
